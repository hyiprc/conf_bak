set encoding=utf-8

" Vim uses 'compatible' for vimrc selected via command-line
" start vim with -u argument to override
if &compatible | set nocompatible | endif

execute pathogen#infect()

if has('gui_running')
    "set guioptions-=m        " remove menu bar
    set guioptions-=T        " remove toolbar
    set guioptions-=r        " remove right-hand scroll bar
    set lines=43 columns=80 linespace=0
    if has('gui_win32')
        set guifont=Cascadia_Mono:h15:cANSI
        set backspace=2
        set backspace=indent,eol,start
    else
        set guifont=Cascadia\ Mono\ 15
    endif
endif

set background=dark " dark or light
"if filereadable(expand("~/.vimrc_background"))
"  let base16colorspace=256
"  source ~/.vimrc_background
"endif
colorscheme grb256
"colorscheme base16-irblack
"colorscheme summerfruit256
"set t_Co=256
":autocmd InsertEnter * set cul
":autocmd InsertLeave * set nocul

if !exists("g:syntax_on") | syntax enable | endif
" highlight itrailing whitespace (two or more)
highlight EOLWS ctermbg=blue guibg=blue
autocmd Syntax * syn match EOLWS "\s\s\+$"
set ruler                 " show line/col in status bar
set sc                    " Case insensitive search
set hls                   " highlight search
set incsearch             " start search when typing
set showmatch             " highlight matching [],{},()
"set nu!                   " toggle line number
"set rnu!                  " toggle relative line number


" --- fuzzy search ---
set wildmenu              " show file list
set path+=**              " recursive search 
    " :e <tab>                    list file to open
    " :find <entertext> <tab>     search to open
    " :vimgrep /<regex>/g %       search current buffer
    " :vim /<regex>/g **/*        search project directory (:vim is alias of :vimgrep)
    " :cope, :cw                  after :vimgrep, open regex list
    " :cnext, :cprev,             after :vimgrep, move to the next/previous
    " :cfirst, :clast             after :vimgrep, move to the first/last

" --- abbreviations ---
:ab #--- # ------------------------------------------

" --- sequence of number ---
" visual block insert a column of 0
" gv to reselect then g ctrl+a  (2 g ctrl+a for incr 2)

" --- normal mode ---

" modifier: 
"   NUM 
"   i a             inside, around

" operator: 
"   c d y           change, delete, yank
"   > <             indent, unindent
"   gq              format text
"   ~ gu gU         toggle case, lower, upper

" motion: 
"   0 $             beginning/end of line
"   _ g_            first/last non-blank character
"   gm              half screenwidth
"   f t F T         find, till forward/backward
"   ; ,             repeat f t F T
"   o O             new line
"   } { ) (         paragraph, sentence
"   + -             next/previous line first non-blank
"   %               matching pair

" text object:
"   w p s           word/paragraph/sentence

" --- visual mode ---

"   o               swap end of selection


" --- markdown and rst ---
    " yypVr-                  heading: Underline the current line
    " :g/^Sect/t.|s/./-/g     heading: global search, t. copy line, substitute

" --- wrap text ---
"set lbr                   " wrap text on space
set tw=70
set fo-=t
    " gqip                    wrap paragraph

" --- indent ---
filetype indent off
set expandtab
set softtabstop=4
set shiftwidth=4
    " >>  ,  << , ==          indent, unindent
    " =i{ , >i{ , <i{         indent within { }
    " --- insert mode
    " ctrl+t , ctrl+d         indent, unindent

" --- vimdiff ---
    " :windo diffthis         vimdiff current uffer
    " ]c, [c                  next/previous changed line
    " dp, do                  put/obtain changes
    " :diffupdate             rescan files

" --- fold ---
highlight Folded ctermbg=black ctermfg=grey cterm=bold
set fillchars="fold: "
set foldmethod=indent
set foldlevelstart=1
set foldnestmax=1
    " za                      toggle fold/unfold
    " zM , zR                 fold/unfold all
    " zm , zr                 fold more/less (foldlevel +=/-= 1)
    " [z , ]z                 go to start/end of fold
    " zj , zk                 go to next/previous fold
    " zf                      create fold

" --- split ---
set splitright
    " :Vex                    open file explorer
set splitbelow
    " ctrl+w then
    "   s , v                 horizontal/vertical split (:e filename to load)
    "   =                     normalize size
    "   w                     switch split
    "   o                     close all except this
    "   | , _                 max width/height
    "   [N] + , -             change height
    "   [N] < , >             change width
    "   r                     rotate split
    "   T                     switch to tabs

" --- navigate ---
" full list: ` # $ % ^ * ( ) 0 _ - + w W e E t T I o O { } [[ [] ][ ]] [m [M ]m ]M [( ]) [{ ]} | A f F ge gE gg G g0 gm g^ g$ g_ g, g; gj gk gI h H j k l L ; ' z. z<CR> z- zz zt zb b B n N M , / ? <C-b> <C-d> <C-e> <C-f> <C-h> <C-i> <C-o> <C-t> <C-u> <C-y>
"set mouse=a               " enable mouse clicking
    " ctrl+[                  esc
    " :[N]                    go to line N
    " G                       end of file
    " t , f [char]            move forward to char (T,F backward)
    " ;                       repeat above (, backward)
    " _ , g_ , 0 , ^ , $      start/end of line
    " H , M , L               top, middle, bottom of screen
    " zt , zz , zb            scroll the view
    " ctrl+e , ctrl+y         one line up/down  
    " ctrl+d , ctrl+u         pagedown/pageup half
    " ctrl+b , ctrl+f         pageup/pagedown
    " ctrl+o , ctrl+i         prevous/next cursor position
    " W , B , E               word based (w, b, e)
    " ) , (                   next/previous sentence
    " } , {                   next/previous blank line
    " '' , ``                 jump between here and last pos
    " '. , g;                 jump to last edit
    " %                       matching {} [] ()
    " # , *                   search word under cursor
    " -- insert mode
    " ctrl+o                  issue a single command 

" --- edit ---
    " u , ctrl+r              undo/redo
    " .                       repeat
    " A                       append at end of line
    " O , o                   new line above/below
    " D                       delete till end of line
    " cc                      change line
    " cw                      change word
    " ci( , ci"               edit inside ()/quotes
    " ca( , ca"               same as above but include ()/quotes
    " s                       delete a char then insert
    " r , R                   replace one character/continuous replace
    " -- insert mode
    " (:h ins-special-keys)
    " ctrl+w                  delete previous word
    " ctrl+h                  backspace
    " ctrl+u                  delete to beginning
    " alt+b                   go back a word

" --- bookmark ---
    " ma , 'a , `a            create/recall bookmark 'a'
    "                         use cap for global bookmark
    " :marks                  list all

" --- buffer ---
    " :e                      open file
    " :ls                     list opened buffer
    " :b 3                    buffer 3
    " :bn , :bp               next/previous buffer
    " :bd                     delete a buffer
    " :sp , :vsp              new buffer in split

" --- autocomplete ---
    " ctrl+n , ctrl+p

" --- tag ---
    " ctags *.py
    " vim -t function         open file and put cursor at function
    " ctrl+]                  jump to function under cursor
    " ctrl+o , ctrl+I         back/forward from above
    " ctrl+t                  all the way back

" --- misc ---
    " ~                       switch case
    " q:                      interactive history
    " command|vim -           pipe stdout to vim
    " ctrl+g                  show info of currently opened file
    " :pwd                    current working directory
"set nrformats=alpha
    " vblock g ctrl+a         increasing number or letters
    " :%!python -m json.tool  pretty json formatting
