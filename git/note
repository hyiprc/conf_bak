# conventional commit
# chore, feat, fix, refactor

# set name of first branch
git init
git checkout -b <first_branch_name>

# empty commit
git commit -m "initial commit" -S --allow-empty

# include starting commit (using ^)
git cherry-pick <starting-commit>^..<ending-commit>

# fast-forwarding a local branch (branch-behind)
git fetch . <branch-ahead>:<branch-behind>

# move branch pointer to commit
git branch -f <branch-name> <new-tip-commit>

# full form of rebase
git rebase --onto <anchor-commit> <exclude-reachable-via> <reachable-from>

# patch add a new file
git add -N         (git add --intent-to-add)
git add -p         (git add --patch)

# clean up after conflit resolve
find . -name "*.orig" -delete

# multiple worktree
git worktree add <path> <branch>
# after removing a worktree, do
git worktree prune

# push to non-bare repository, set allow on remote by
git config --local receive.denyCurrentBranch updateInstead

# rename a branch
git branch -m <branch> <new_name>
git push <repo> -u <new_name>
git push <repo> -d <branch>

git branch -m master main
git fetch origin
git branch -u origin/main main
git remote set-head origin -a

# merge: @{u} - not something we an merge
git branch -u origin/main main
